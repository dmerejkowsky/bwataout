## Hide release notes from latest version
set-option global startup_info_version 20200901

## Setup plug.kak
source "%val{config}/plugins/plug.kak/rc/plug.kak"

## Connect
plug alexherbo2/prelude.kak
plug alexherbo2/connect.kak commit 625375f %{
  require-module connect
  require-module connect-lf
  require-module connect-fzf

  # Start `lf` when trying to edit a directory
  hook global RuntimeError "\d+:\d+: '\w+' (.*): is a directory" %{
    evaluate-commands %sh{
      directory=$kak_hook_param_capture_1
      echo lf $directory
    }
  }

  map global user h ": connect-terminal <ret>" -docstring "Spawn a connected terminal"
}

## gmi files are plain text
hook global BufCreate .*\.gmi$ %{
  set-option buffer filetype text
}

## jinja2 files are jinja
hook global WinCreate .*\.jinja2 %{
    require-module jinja
    add-highlighter window/ ref jinja
}

# mky files are for the Monkey programming language, but I don't want to
# write a kakoune syntax file, so I do the next best thing
hook global BufCreate .*\.mky$ %{
  set-option buffer filetype javascript
}

## Completion
set global ignored_files "(.*\.egg-info)|(__pycache__)|(\.mypy_cache)|(build/)"

## LSP
eval %sh{kak-lsp --kakoune -s $kak_session}

set global lsp_cmd "kak-lsp -s %val{session}"

# Note: call lsp-enable-window when ready
map global user l ': enter-user-mode lsp<ret>' -docstring 'enter lsp user mode'
map global lsp n ': lsp-find-error --include-warnings<ret>' -docstring 'find next warning or error'
map global lsp l ': lsp-enable<ret>' -docstring 'enable lsp for the whole session'
map global lsp R ': lsp-rename-prompt<ret>' -docstring 'rename symbol under cursor'

## EditorConfig support
# .editorconfig file should exist somewhere
# `editorconfig` binary should exist
hook global BufCreate .* "try %{editorconfig-load} "
set-option global tabstop 4

## smart tab
plug "andreyorst/smarttab.kak" %{
  hook global BufCreate .* "expandtab"
  hook global BufCreate Makefile "noexpandtab"
}

## snippets
plug "occivink/kakoune-snippets"

## buffers #
plug "occivink/kakoune-buffer-switcher" %{
    map global user b ': buffer-switcher<ret>'
}


## inc/dec
plug "Screwtapello/kakoune-inc-dec" domain "gitlab.com" config %{
 map global normal <c-a> ': inc-dec-modify-numbers + %val{count}<ret>'
 map global normal <c-x> ': inc-dec-modify-numbers - %val{count}<ret>'
}

## kak-tree
plug "ul/kak-tree"
declare-user-mode tree
map global user t ' :enter-user-mode tree<ret>' -docstring 'enter treesitter mode'
map global tree p ': tree-select-parent-node<ret>' -docstring 'select parent node'

## linter
declare-user-mode linting
map global user n ' :enter-user-mode linting<ret>' -docstring 'enter linting mode'
map global linting n ': lint-next-error<ret>' -docstring 'go to next lint error'

## save-state
plug "https://gitlab.com/Screwtapello/kakoune-state-save"

## Formatting

# Dart: use dartfmt
hook global WinSetOption filetype=dart %{
  set window formatcmd 'dartfmt'
  format-on-save
}

# terraform: use `terraform fmt`
hook global WinSetOption filetype=terraform %{
  set window formatcmd 'terraform fmt - '
  format-on-save
}

# Go: use goimports
hook global BufWritePre .*\.go "go-format -use-goimports"

# Python: use black
hook global WinSetOption filetype=rust %{
  set window formatcmd 'rustfmt --edition 2018'
  format-on-save
}

define-command isort %{
  write
  nop %sh{ isort . }
  edit!
}

# Rust: use rustfmt
hook global WinSetOption filetype=python %{
  set window formatcmd 'black -'
  format-on-save
}

# Other languages: add hoc, sadly
declare-option str format_project_cmd
define-command format-project %{
  evaluate-commands %sh{
    echo "echo -debug format project cmd: ${kak_opt_format_project_cmd}"
    if [ -n "${kak_opt_format_project_cmd}" ]; then
      echo "write-all -sync"
      echo "evaluate-commands %sh{
        ${kak_opt_format_project_cmd} > /dev/null
      }"
      echo "edit!"
    else
      printf '%s\n' "echo -markup '{Error}format_project_cmd option not specified'"
    fi
  }
}

define-command lint-on-save "hook buffer BufWritePre .* lint"
define-command format-on-save "hook buffer BufWritePre .* format"
define-command format-project-on-save "hook global BufWritePre .* format-project"


## UI options
eval %sh{
if [ "$(uname)" = "Darwin" ]; then
  echo "colorscheme default"
else
  echo "colorscheme desertex"
fi
}
add-highlighter global/ wrap -word
set-option global ui_options 'ncurses_assistant=cat'

# Use only gutter signs for LSP diagnostics,
# but keep the color in the rest of the line as-is
unset-face global DiagnosticWarning
unset-face global DiagnosticError
set-face global LineFlagErrors green+bi
set-option global lsp_diagnostic_line_warning_sign !
set-option global lsp_diagnostic_line_error_sign  ✘

# Status line
set-option global modelinefmt '%opt{lsp_diagnostic_error_count}✘  %opt{lsp_diagnostic_warning_count}! %val{bufname} %val{cursor_line}:%val{cursor_char_column} {{context_info}} {{mode_info}} - %val{client}@[%val{session}]'


## Plugins customisation
set-option global grepcmd 'rg --no-heading --line-number --column --sort path'


## Working dir stuff
declare-option str project_working_dir %sh{ pwd }
plug 'dmerejkowsky/kakoune-cd' %{
  map global user c ': enter-user-mode cd<ret>' -docstring 'enter cd user mode'
  map global user f ': open-current-buffer-directory<ret>' -docstring 'open current buffer dir in kakoune'
  map global cd c ': change-directory %val{opt_project_working_dir}<ret>' -docstring 'reset working dir'
  alias global pwd print-working-directory
}


# Spell check
plug "dmerejkowsky/kak-spell" config %{
  declare-user-mode kak-spell
  map global user s ': enter-user-mode kak-spell<ret>' -docstring 'enter spell user mode'
  map global kak-spell a ': kak-spell-add<ret>' -docstring 'add the selection to the user dict'
  map global kak-spell d ': kak-spell-disable<ret>' -docstring 'clear spelling highlighters'
  map global kak-spell e ': kak-spell-enable en_US<ret> :kak-spell <ret>' -docstring 'run spell check in English'
  map global kak-spell f ': kak-spell-enable fr_FR<ret> :kak-spell <ret>' -docstring 'run spell check in French'
  map global kak-spell l ': kak-spell-list <ret>' -docstring 'list spelling errors in a buffer'
  map global kak-spell n ': kak-spell-next<ret>' -docstring 'go to next spell error'
  map global kak-spell p ': kak-spell-previous<ret>' -docstring 'go to previous spell error'
  map global kak-spell r ': kak-spell-replace<ret>' -docstring 'suggest a list of replacements'
  map global kak-spell x ': kak-spell-remove<ret>' -docstring 'remove the selection from the user dict'
}


# Subvert
declare-user-mode subvert
map global user y ':enter-user-mode subvert<ret>' -docstring 'enter subvert user mode'
map global subvert c '| kak-subvert camel <ret>'     -docstring 'camelCase'
map global subvert h '| kak-subvert camel <ret>'     -docstring 'Http-Case'
map global subvert k '| kak-subvert kebab <ret>'     -docstring 'kebab-case'
map global subvert p '| kak-subvert pascal <ret>'    -docstring 'PascalCase'
map global subvert . '| kak-subvert sentence <ret>'  -docstring 'Sentence case'
map global subvert s '| kak-subvert snake <ret>'     -docstring 'snake_case'
map global subvert S '| kak-subvert screaming <ret>' -docstring 'SCREAMING_CASE'
map global subvert t '| kak-subvert train <ret>'     -docstring 'Train-Case'
map global subvert T '| kak-subvert title <ret>'     -docstring 'Title Case'
map global subvert u '| kak-subvert ugly <ret>'      -docstring 'Ugly_Case'

## Custom commands
define-command show-line-numbers -docstring "show line numbers" \
  "add-highlighter buffer/ number-lines"
define-command hide-line-numbers  -docstring "hide line numbers" \
  "remove-highlighter buffer/number-lines"
define-command disable-markdown-highlighters  -docstring "disable markdown highlighters" \
  "remove-highlighter shared/markdown"
define-command markdown-format -docstring "format selection into clean markdown" \
   "execute-keys | mdfmt <ret>"


## Always use spell check for commit messages
hook global WinSetOption filetype=git-commit %{
    kak-spell-enable en_US
    kak-spell
}

# Show line numbers by default
hook global BufOpenFile .*  show-line-numbers


## Custom mappings

map global user f ': fzf-files <ret>' -docstring 'find files with fzf'
map global user a ':addimport ' -docstring 'run addimport'

declare-user-mode grep
map global user g ':enter-user-mode grep<ret>' -docstring 'enter grep mode'
map global grep g ':grep ' -docstring 'run grep'
map global grep p ': grep-next-match<ret>' -docstring 'run grep-previous-match'
map global grep n ': grep-next-match<ret>' -docstring 'run grep-next-match'
map global grep l ': edit -existing *grep* <ret>' -docstring 'show grep results'

declare-user-mode make
map global user m ': enter-user-mode make<ret>' -docstring 'enter make mdoe'
map global make m ': make<ret>' -docstring 'run make'
map global make n ': make-next-error<ret>' -docstring 'go to next error'
map global make p ': make-previous-error<ret>' -docstring 'go to previous error'
map global make s ':set global makecmd ' -docstring 'configure makecmmd'
map global make l ': edit -existing *make* <ret>' -docstring 'show make output'

map global user B ':set-option buffer filetype ' -docstring 'set filetype for the current buffer'
set-option global autowrap_column 80
declare-option int comments_line_length 72
map global normal = '|dfmt -w $kak_opt_comments_line_length <ret>'

# Yeah, I know waq is the default alias, but muscle memory, you know ...
alias global wqa write-all-quit
define-command cq 'quit! 2' -docstring "force quit with non-zero exit code"


## Copy/pasting
hook global NormalKey y %{ nop %sh{
  if [ "$(uname)" = "Darwin" ]; then
    printf %s "$kak_main_reg_dquote" | pbcopy
  else
    printf %s "$kak_main_reg_dquote" | xsel --input --clipboard
  fi
}}

map global user P '!system-clipboard-paste<ret>'  -docstring 'yank from system clipboard after selection'
map global user p '<a-!>system-clipboard-paste<ret>' -docstring 'yank from system clipboard before selection'


## Persistent file and working dirs history
eval %sh{mru-files init-kakoune}
map global user o ': mru <ret>' -docstring 'browse recently opened files'

eval %sh{cwd-history init-kakoune}
map global cd o ': cwd-history <ret>' -docstring 'open a buffer containing list of recent working dirs'

map global user H ': change-directory-current-buffer <ret> : connect-terminal <ret>'


# Backup everything!
hook global BufWritePost .* %{ nop %sh{ kak-back backup  "${kak_hook_param}" } }
define-command restore-backup %{
  nop %sh{
    kak-back restore "${kak_buffile}"
  }
}

# Clean trailing whitespace before
# writing
define-command cleanup-whitespace %{
  try %{ execute-keys -draft \% s \h+$ <ret> d }
}
hook global BufWritePre .* cleanup-whitespace

## jj is escape
hook global InsertChar j %{ try %{
  exec -draft hH <a-k>jj<ret> d
  exec <esc>
}}

## IPC
define-command -docstring "trigger a run from on-kak-refresh" ipc-run %{
  nop %sh{ echo "run" >> /tmp/kak-refresh }
}
map global user i ':write-all<ret> :ipc-run<ret>' -docstring "call ipc-run"

declare-user-mode comments
map global user d ' :enter-user-mode comments<ret>' -docstring 'enter comments mode'
map global comments d ': comment-line <ret>' -docstring 'toggle line comment'
map global comments D ': comment-block <ret>' -docstring 'toggle block comment'

## Source local config
source "%val{config}/local.kak"

## Source project config if it exists
hook global KakBegin .* %{
  evaluate-commands %sh{
    if [ -f .kakrc ]; then
       printf %s\\n "source '.kakrc'"
    fi
  }
}

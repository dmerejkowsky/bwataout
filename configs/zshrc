##
# zsh config
#
# Bits taken from github.com/cgestes/ctafconf.git


# Shell is non-interactive.  Be done now
if [[ $- != *i* ]] || [ a$HOST = agate-ssh ]; then
  return
fi

# Options
setopt correct

setopt equals
setopt magic_equal_subst
setopt autocd

setopt numericglobsort
setopt extendedglob             # weird & wacky pattern matching - yay zsh!
setopt no_nomatch               # but when pattern matching fails, simply use the command as is

setopt interactivecomments      # date # comment will work

# Completion

## poetry completion
fpath=("$HOME/.local/share/zsh/poetry" $fpath)

autoload -U compinit
compinit

## Filename suffixes to ignore during completion
fignore=(.o .pyc __pycache__)
setopt list_ambiguous           # complete as much of a completion until it gets ambiguous.
setopt norecexact               # recognise exact match even if there are ambiguous matches
setopt complete_aliases
setopt completeinword           # not just at the end
setopt no_always_to_end         # when complete from middle, move cursor

## Menu
setopt no_menu_complete		# jump through menus
setopt automenu			# don't cycle completions
setopt auto_list                # display a list of completion
setopt auto_param_keys
setopt auto_param_slash         # auto add slash when completing path
setopt auto_remove_slash

## History handling
setopt append_history           # append to history
setopt inc_append_history       # append immediately
setopt hist_verify              # when using ! cmds, confirm first
setopt extended_history         # add timestamp in history
setopt hist_no_store            # dont add 'history' command (fc -l) to the history
setopt histignorespace          # hide from history lines starting with space

# Directory history (use +/- to navigate)
setopt autocd             # change directory if given its path
setopt autopushd	      # automatically append dirs to the push/pop list
setopt pushd_minus	      # exchange meaning of + and - for pushd
setopt pushd_silent	      # don't tell me about automatic pushd
setopt pushd_to_home	      # use $HOME when no arguments specified
setopt pushd_ignoredups	      # ignore duplicates
alias -- +='pushd +0'
alias -- -='pushd -1'

# Aliases

alias psgrep='ps aux | grep -v grep | grep'
alias cux='chmod +x'

## Better safe than sorry
alias mv="mv -iv"
alias rm="rm -i"
alias cp="cp -iv"

## Open pdf files with ./path/to/pdf
alias -s pdf=okular
alias -s ods=loffice
alias -s docx=loffice

alias gg="git gui &!"
export GIT_EDITOR="kak -s git"  # make sure only one kak is used by git

alias tv="vlc http://mafreebox.freebox.fr/freeboxtv/playlist.m3u &!"

alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias ....="cd ../../../.."

## just because
alias kakdir=vidir

## Pretty ls
if [[ $(uname) == "Darwin" ]] ; then
  # for mac
  export LSCOLORS='dxgxfxexcxegedabagacad'
  alias ls="ls -FG"
else
  # for linux
  # write output of `dircolors` and source it somewhere
  alias ls="ls --classify --quoting-style=escape --color=auto"
fi

alias ll="ls -al"


# Misc
autoload run-help

# Use emacs-mode
bindkey -e

bindkey '^[[A' history-beginning-search-backward
bindkey '^[[B' history-beginning-search-forward

# command-not-found hook
type pkgfile > /dev/null
if [[ $? -eq 0 ]]; then
command_not_found_handler() {
  local pkgs cmd="$1"

  pkgs=(${(f)"$(pkgfile -b -v -- "$cmd" 2>/dev/null)"})
  if [[ -n "$pkgs" ]]; then
    printf '%s may be found in the following packages:\n' "$cmd"
    printf '  %s\n' $pkgs[@]
    return 127
  fi

  printf 'zsh: command not found: %s\n' "$cmd" 1>&2
  return 127
}
fi

# Global settings
export HISTSIZE=50000
export HISTFILE=~/.zshhistory
export SAVEHIST=10000
export BLOCK_SIZE=human-readable
## depth of the directory history
DIRSTACKSIZE=30

top_dir=$(dirname $(dirname $0))
export PATH="${top_dir}/bin:$HOME/.local/bin:$PATH"
## See ~/.npmrc
export PATH="${HOME}/.local/share/node/bin:$PATH"
export PATH="${HOME}/.config/kak/plugins/connect.kak/bin/:$PATH"

## required for pure-prompt
fpath=("$HOME/.local/share/zsh/pure-prompt" $fpath)


## Prevent fork bomb
limit maxproc 1042 2>/dev/null

# Functions

## cd /path/to/file -> cd /path/to
smart_cd() {
  if [[ -z "$1" ]]; then
    \cd "$HOME"
  elif [[ -f "$1" ]]; then
    \cd "$(dirname "$1")"
  else
    \cd "$1"
  fi
}

alias cd=smart_cd

## go to a path relative to the git top dir
gcd() {
  topdir=$(git rev-parse --show-toplevel)
  if [[ $? -ne 0 ]]; then
    return 1
  fi
  cd "${topdir}/${1}"
}

## create an archive with a sensible name
gitar() {
  toplevel=$(git rev-parse --show-toplevel)
  desc=$(git describe --always --tags)
  name="$(basename ${toplevel})-${desc}"
  output="${name}.tar.gz"
  git archive --prefix "${name}/" --output "${name}.tar.gz"  HEAD
  echo "archive generated in: ${output}"
}

## display most recent file in the current directory
latest() {
  echo $(\ls --quoting-style=shell -t | head -n1)
}

## insert latest file in the current prompt
latest-file-widget () {
  LBUFFER="${LBUFFER} $(latest)"
  local ret=$?
  zle redisplay
  return $ret
}

zle -N latest-file-widget
bindkey '^[l' latest-file-widget

## move the latest downloaded file
mvdl() {
  last=$(\ls -t "${HOME}/Downloads" | head -n1)
  mv "${HOME}/Downloads/${last}" $@
}


## open all the conflicting files in $EDITOR
resolve() {
  (gitcd && git diff --name-only --diff-filter=U | xargs $EDITOR)
}


## open the script you just ran in $EDITOR
kakbin() {
  # which is a builtin that works with aliases and functions,
  # prefer /usr/bin/which
  full_path=$(/usr/bin/which $1 2> /dev/null)
  if [[ $? -eq 0 ]] ; then
    $EDITOR ${full_path}
  else
    echo "$1 not found"
    return 1
  fi
}

## extract various archives given their names
xt() {
 if [ -f "$1" ]; then
    case "$1" in
      *.7z)        7z x "$1"         ;;
      *.Z)         uncompress "$1"   ;;
      *.aar)       jar xf "$1"       ;;
      *.bz2)       bunzip2 "$1"      ;;
      *.jar)       jar xf "$1"       ;;
      *.rar)       unrar "$1"        ;;
      *.rar)       unrar x "$1"      ;;
      *.tar)       tar xvf "$1"      ;;
      *.tar.bz2)   tar xvjf "$1"     ;;
      *.tar.gz)    tar xvzf "$1"     ;;
      *.tbz)       tar xvjf "$1"     ;;
      *.tbz2)      tar xvjf "$1"     ;;
      *.tgz)       tar xvzf "$1"     ;;
      *.xz)        tar xvJf "$1"     ;;
      *.zip)       unzip "$1"        ;;
      # Must be after tar.gz
      *.gz)        gunzip "$1"       ;;
      *)           echo "'$1' cannot be extracted via extract" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}


## show where the binaries are at
whereal() {
  where "$1" | xargs -I{} ls -l {}
}


# Prompt
autoload -U promptinit
promptinit

export PURE_GIT_UNTRACKED_DIRTY=1
prompt pure

# kakoune
export VISUAL="kak"
export EDITOR="kak"

# fzf & dm-tools binaries
if [[ -d ~/.fzf ]] ; then
  export PATH=$PATH:$HOME/.fzf/bin
  source ~/.fzf/shell/completion.zsh
  source ~/.fzf/shell/key-bindings.zsh
fi

register_cwd() {
  cwd-history add "$(pwd)"
}
typeset -gaU chpwd_functions
chpwd_functions+=register_cwd

register_cmd() {
  cmd-history add $1
}
typeset -gaU preexec_functions
preexec_functions+=register_cmd

export FZF_DEFAULT_OPTS="--tac --no-sort"
export FZF_CTRL_R_OPTS="--exact"

z() {
  cwd_list=$(cwd-history list)
  ret="$(echo $cwd_list| fzf --exact --query=${1})"
  builtin cd "${ret}"
  if [[ $? -ne 0 ]]; then
    cwd-history remove "${ret}"
  fi
}

# bind CTRL-N and CTRL-P to navigate in history
# Note have CTRL-N is 'previous', and CTRL-P is
# 'next', that's because in dvorak (and on mac),
# CTRL-N is much easier to type :)
bindkey '^N' up-line-or-history
bindkey '^P' down-line-or-history


# python

activate() {
  activate_file=$(poetry env info -p)/bin/activate
  if [[ ! -e "${activate_file}" ]]; then
    echo "no venv manager found"
    return 1
  else
    source $activate_file
  fi
}

# If we were called from poetry-activate, source the script now
if [[ -n $DM_TOOLS_ACTIVATE ]]; then
  source $DM_TOOLS_ACTIVATE
fi

alias a=activate
alias d=deactivate
alias da="deactivate;activate"
alias icat="kitty +kitten icat"

export DMENV_VENV_OUTSIDE_PROJECT=1
export DMENV_SCRIPTS_PATH=/home/dmerej/.local/bin

# Tanker
confluence () {
	args=${@//\'/\\\'}
	search=$(node -e "console.log(encodeURIComponent('$args'));")
	chromium https://tanker.atlassian.net/wiki/search\?text=$search
}
